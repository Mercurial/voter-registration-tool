{-# LANGUAGE FlexibleContexts #-}

module Config (opts) where

import Data.Text (Text)
import Control.Monad.IO.Class (MonadIO, liftIO)
import Control.Monad.Except (MonadError, throwError, catchError)

import Options.Applicative

import qualified Cardano.API as Api
import Cardano.API (Address, SigningKey, StakeKey, Witness)
import Cardano.Api.Typed (Shelley)
import Cardano.CLI.Shelley.Key (InputDecodeError)
import Cardano.CLI.Shelley.Commands (WitnessFile(WitnessFile))
import Cardano.CLI.Types (SigningKeyFile (..))
import Cardano.Api.TextView (TextViewError)

import Extern 

data Config
  = Config { cfgPaymentAddress    :: Address Shelley
           , cfgStakeSigningKey   :: SigningKey StakeKey
           , cfgPaymentSigningKey :: Witness Shelley
           , cfgVotePublicKey     :: Text
           }

optsToConfig 
  :: ( MonadIO m
     , MonadError e m
     , AsFileError e fileErr
     , AsInputDecodeError fileErr
     , AsTextViewError fileErr
     , AsNotStakeSigningKeyError e
     )
  => Opts
  -> m Config
optsToConfig (Opts stateDir pskf addr vpkf sskf) = do
  stkSign <- readStakeSigningKey (SigningKeyFile sskf)
  votepk  <- readVotePublicKey vpkf
  witness <- readWitnessFile (WitnessFile pskf)
  pure $ Config addr stkSign undefined votepk

data Opts
  = Opts { optStateDir              :: FilePath
         , optPaymentSigningKeyFile :: FilePath
         , optPaymentAddress        :: Address Shelley
         , optVotePublicKeyFile     :: FilePath
         , optStakeSigningKeyFile   :: FilePath
         }
  deriving (Eq, Show)

parseOpts :: Parser Opts
parseOpts = Opts
  <$> strOption (long "state-dir" <> metavar "DIR" <> help "state directory" <> showDefault <> value "./state-node-testnet")
  <*> strOption (long "payment-signing-key" <> metavar "FILE" <> help "file used to sign transaction")
  <*> option (readerFromAttoParser parseAddress) (long "payment-address" <> metavar "STRING" <> help "address associated with payment (hard-coded to use info from first utxo of address)")
  <*> strOption (long "vote-public-key" <> metavar "FILE" <> help "vote key generated by jcli (corresponding private key must be ed25519extended)")
  <*> strOption (long "stake-signing-key" <> metavar "FILE" <> help "stake authorizing vote key")

opts =
  info
    ( parseOpts <**> helper )
    ( fullDesc
    <> progDesc "Create a vote transaction"
    <> header "voter-registration - a tool to create vote transactions"
    )
